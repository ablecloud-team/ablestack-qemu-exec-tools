name: Build and Release ablestack-qemu-exec-tools

on:
  push:
    tags:
      - "v*"

jobs:
  # ───────────────────────────────────────────────
  # 1️⃣ RPM BUILD (Rocky 9 + 10 병행)
  # ───────────────────────────────────────────────
  build-rpm:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os_version: [9, 10]
    container:
      image: rockylinux/rockylinux:${{ matrix.os_version }}
      options: --user 0
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install build dependencies
        run: |
          dnf -y install make rpm-build tar git dnf-plugins-core createrepo_c

      - name: Build RPM
        run: make rpm

      - name: Create RPM repo for Rocky ${{ matrix.os_version }}
        run: |
          mkdir -p repo/rpm-rocky${{ matrix.os_version }}
          cp rpmbuild/RPMS/*/*.rpm repo/rpm-rocky${{ matrix.os_version }}/
          createrepo_c repo/rpm-rocky${{ matrix.os_version }}

          mkdir -p release/rpm
          mv repo release/rpm/

      - uses: actions/upload-artifact@v4
        with:
          name: rpm-package-${{ matrix.os_version }}
          path: release/rpm/**

  # ───────────────────────────────────────────────
  # 2️⃣ DEB BUILD (Ubuntu 22.04 / 24.04)
  # ───────────────────────────────────────────────
  build-deb:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os_version: [22.04, 24.04]
    steps:
      - uses: actions/checkout@v4

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential make dpkg-dev debhelper apt-utils git

      - name: Build DEB
        run: make deb

      - name: Download dependencies and create repo
        run: |
          mkdir -p repo/pool
          find build/deb -type f -name "*.deb" -exec cp {} repo/pool/ \;
          cd repo/pool

          echo "[INFO] Starting dependency collection..."
          seen_packages=""
          last_count=0

          while true; do
            current_count=$(ls -1 *.deb 2>/dev/null | wc -l)
            if [ "$current_count" -eq "$last_count" ]; then
              echo "[INFO] No new packages detected. Dependency collection complete."
              break
            fi
            last_count=$current_count

            for pkg in *.deb; do
              PKGNAME=$(dpkg-deb -f "$pkg" Package)
              if echo "$seen_packages" | grep -qw "$PKGNAME"; then
                continue
              fi
              seen_packages="$seen_packages $PKGNAME"

              DEPENDS=$(dpkg-deb -f "$pkg" Depends | \
                        tr ',' '\n' | sed -E 's/\(.*\)//g' | sed 's/|/ /g' | \
                        awk '{print $1}' | sort -u)
              echo "[INFO] [$PKGNAME] depends on: $DEPENDS"

              for dep in $DEPENDS; do
                if [ -z "$dep" ]; then continue; fi
                if echo "$seen_packages" | grep -qw "$dep"; then
                  continue
                fi
                echo "[INFO] Downloading dependency: $dep"
                apt-get download "$dep" || true
              done
            done
          done

          cd ../..
          mkdir -p repo/dists/stable/main/binary-amd64
          pushd repo >/dev/null
          dpkg-scanpackages pool /dev/null | gzip -9c > dists/stable/main/binary-amd64/Packages.gz
          popd >/dev/null

          mv repo "deb-ubuntu${{ matrix.os_version }}"
          mkdir -p release/deb
          mv deb-ubuntu${{ matrix.os_version }} release/deb/
          echo "[INFO] DEB repo for Ubuntu ${{ matrix.os_version }} created."

      - uses: actions/upload-artifact@v4
        with:
          name: deb-package-${{ matrix.os_version }}
          path: release/deb/**

  # ───────────────────────────────────────────────
  # 3️⃣ WINDOWS MSI BUILD
  # ───────────────────────────────────────────────
  build-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install WiX v4
        run: dotnet tool install --global wix --version 4.*

      - name: Add dotnet tools to PATH
        shell: pwsh
        run: echo "$env:USERPROFILE\.dotnet\tools" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Build MSI
        shell: pwsh
        run: make windows

      - uses: actions/upload-artifact@v4
        with:
          name: msi-package
          path: windows/msi/out/*

  # ───────────────────────────────────────────────
  # 4️⃣ RELEASE + ISO CREATION
  # ───────────────────────────────────────────────
  release:
    needs: [build-rpm, build-deb, build-windows]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Collect artifacts into structured dirs
        run: |
          mkdir -p release/rpm release/deb release/msi
          find dist -type f -path "*/rpm-package-*/repo/*" -exec cp --parents {} release/ \;
          find dist -type f -path "*/deb-package-*/repo/*" -exec cp --parents {} release/ \;
          find dist -type f -path "*/msi-package/*" -exec cp {} release/msi/ \;

          echo "Release directory structure:"
          tree release || ls -R release

      - name: Create install-linux.sh (universal installer)
        run: |
          cat <<'EOF' > release/install-linux.sh
          #!/usr/bin/env bash
          set -e
          ISO_MNT=$(dirname "$0")

          echo "[INFO] ABLESTACK QEMU Exec Tools Installer"
          echo "[INFO] Detecting distribution type..."

          if [ -f /etc/os-release ]; then
              . /etc/os-release
              DISTRO=$ID
              MAJOR_VERSION=$(echo $VERSION_ID | cut -d'.' -f1)
          else
              echo "[ERROR] Cannot detect distribution!"
              exit 1
          fi

          case "$DISTRO" in
              rocky|rhel|centos|almalinux|fedora)
                  echo "[INFO] Detected RPM-based system ($DISTRO $MAJOR_VERSION)"
                  REPO_FILE=/etc/yum.repos.d/ablestack-qemu-exec-tools.repo
                  REPO_PATH=$(realpath "$ISO_MNT/rpm/rpm-rocky$MAJOR_VERSION")
                  cat <<EOR | sudo tee $REPO_FILE >/dev/null
          [ablestack-qemu-exec-tools]
          name=ablestack-qemu-exec-tools
          baseurl=file://$REPO_PATH
          enabled=1
          gpgcheck=0
          EOR
                  sudo dnf clean all
                  sudo dnf -y install ablestack-qemu-exec-tools
                  ;;
              ubuntu|debian)
                  echo "[INFO] Detected DEB-based system ($DISTRO $MAJOR_VERSION)"
                  REPO_PATH=$(realpath "$ISO_MNT/deb/deb-ubuntu$MAJOR_VERSION.04")
                  LIST_FILE=/etc/apt/sources.list.d/ablestack-qemu-exec-tools.list
                  echo "deb [trusted=yes] file://$REPO_PATH stable main" | sudo tee $LIST_FILE >/dev/null
                  sudo apt-get update
                  sudo apt-get -y install ablestack-qemu-exec-tools
                  ;;
              *)
                  echo "[ERROR] Unsupported distribution: $DISTRO"
                  exit 1
                  ;;
          esac

          echo "[INFO] Installation complete."
          EOF
          chmod +x release/install-linux.sh

      - name: Create README.txt
        run: |
          cat <<'EOF' > release/README.txt
          ablestack-qemu-exec-tools Offline Installation ISO
          ==================================================
          Contains pre-built packages for:
            - RPM (Rocky / RHEL 9, 10)
            - DEB (Ubuntu 22.04 / 24.04)
            - MSI (Windows)
          Also includes a universal installer (install-linux.sh) for Linux systems.
          EOF

      - name: Generate ISO
        run: |
          sudo apt-get update && sudo apt-get install -y genisoimage
          VERSION=${GITHUB_REF##*/}
          mkisofs -o ablestack-qemu-exec-tools-${VERSION}.iso \
            -V "ablestack-qemu-exec-tools ${VERSION}" \
            -r -J release
          mkdir -p build/iso
          mv ablestack-qemu-exec-tools-${VERSION}.iso build/iso/
          ls -lh build/iso

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          body: "Auto-built offline ISO for all OS types (RPM/DEB/MSI)."
          files: build/iso/*.iso
