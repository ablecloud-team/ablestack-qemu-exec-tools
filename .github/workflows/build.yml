name: Build and Release ablestack-qemu-exec-tools (Multi-OS Airgapped)

on:
  push:
    tags:
      - "v*"

jobs:
  # =====================================================
  # 1️⃣  RPM Build (Rocky 9 / 10)
  # =====================================================
  build-rpm:
    strategy:
      matrix:
        os_version: [9, 10]
    runs-on: ubuntu-latest
    container:
      image: rockylinux/rockylinux:${{ matrix.os_version }}
      options: --user 0
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install build dependencies
        run: dnf -y install make rpm-build tar git

      - name: Build RPM
        run: make rpm

      - name: Download dependencies and create repo
        run: |
          dnf -y install dnf-plugins-core createrepo_c
          mkdir -p repo/Packages
          find rpmbuild/RPMS -type f -name "*.rpm" -exec cp {} repo/Packages/ \;
          for pkg in repo/Packages/*.rpm; do
            dnf download --resolve "$pkg" --destdir repo/Packages || true
          done
          createrepo_c repo
          mv repo "rpm-rocky${{ matrix.os_version }}"
          echo "[INFO] RPM repo for Rocky ${{ matrix.os_version }} created."

      - uses: actions/upload-artifact@v4
        with:
          name: rpm-rocky${{ matrix.os_version }}
          path: rpm-rocky${{ matrix.os_version }}

  # =====================================================
  # 2️⃣  DEB Build (Ubuntu 22.04 / 24.04)
  # =====================================================
  build-deb:
    strategy:
      matrix:
        os_version: [22.04, 24.04]
    runs-on: ubuntu-${{ matrix.os_version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential make dpkg-dev debhelper git apt-rdepends

      - name: Build DEB
        run: make deb

      # 완전한 의존성 수집
      - name: Download dependencies and create repo
        run: |
          mkdir -p repo/pool
          find build/deb -type f -name "*.deb" -exec cp {} repo/pool/ \;
          cd repo/pool

          for pkg in *.deb; do
            PKGNAME=$(dpkg-deb -f "$pkg" Package)
            DEPS=$(dpkg-deb -f "$pkg" Depends | sed 's/,/\n/g' | cut -d' ' -f1 | sort -u)
            echo "[INFO] Level-1 dependencies for $PKGNAME: $DEPS"

            # 전체 의존성 트리 (재귀)
            ALL_DEPS=$(apt-rdepends $DEPS 2>/dev/null | grep -v "^ " | grep -v "^Reading" | sort -u)
            echo "[INFO] Full dependency tree: $ALL_DEPS"

            for dep in $ALL_DEPS; do
              apt-get download "$dep" || true
            done
          done

          cd ../..
          mkdir -p repo/dists/stable/main/binary-amd64
          dpkg-scanpackages ./repo/pool /dev/null | gzip -9c > ./repo/dists/stable/main/binary-amd64/Packages.gz
          mv repo "deb-ubuntu${{ matrix.os_version }}"
          echo "[INFO] DEB repo for Ubuntu ${{ matrix.os_version }} created."

      - uses: actions/upload-artifact@v4
        with:
          name: deb-ubuntu${{ matrix.os_version }}
          path: deb-ubuntu${{ matrix.os_version }}

  # =====================================================
  # 3️⃣  Windows MSI Build
  # =====================================================
  build-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install WiX v4
        run: dotnet tool install --global wix --version 4.*

      - name: Add dotnet tools to PATH
        shell: pwsh
        run: echo "$env:USERPROFILE\.dotnet\tools" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Build MSI
        shell: pwsh
        run: make windows

      - uses: actions/upload-artifact@v4
        with:
          name: msi-package
          path: windows/msi/out/*

  # =====================================================
  # 4️⃣  ISO & Release
  # =====================================================
  release:
    needs: [build-rpm, build-deb, build-windows]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Collect all artifacts
        run: |
          mkdir -p release/{rpm,deb,msi}
          find dist -type d -name "rpm-rocky*" -exec cp -r {} release/rpm/ \;
          find dist -type d -name "deb-ubuntu*" -exec cp -r {} release/deb/ \;
          find dist -type f -path "*/msi-package/*" -exec cp {} release/msi/ \;
          tree release || ls -R release

      # install-linux.sh 추가 (경로 보정)
      - name: Add install-linux.sh
        run: |
          cat > release/install-linux.sh <<'EOF'
          #!/usr/bin/env bash
          set -e
          ISO_MNT=$(dirname "$0")

          echo "[INFO] ABLESTACK QEMU Exec Tools Installer"
          echo "[INFO] Detecting distribution type..."

          if [ -f /etc/os-release ]; then
              . /etc/os-release
              DISTRO=$ID
              VERSION_ID=$(echo $VERSION_ID | cut -d'.' -f1,2)
          else
              echo "[ERROR] Cannot detect distribution!"
              exit 1
          fi

          case "$DISTRO" in
              rocky|rhel|centos|almalinux|fedora)
                  echo "[INFO] Detected RPM-based system ($DISTRO $VERSION_ID)"
                  REPO_FILE=/etc/yum.repos.d/ablestack-qemu-exec-tools.repo
                  cat <<EOR | sudo tee $REPO_FILE >/dev/null
          [ablestack-qemu-exec-tools]
          name=ablestack-qemu-exec-tools
          baseurl=file://$ISO_MNT/rpm/rpm-rocky$VERSION_ID
          enabled=1
          gpgcheck=0
          EOR
                  sudo dnf clean all
                  sudo dnf -y install ablestack-qemu-exec-tools
                  echo "[INFO] Installation complete (RPM)."
                  ;;
              ubuntu|debian)
                  echo "[INFO] Detected DEB-based system ($DISTRO $VERSION_ID)"
                  LIST_FILE=/etc/apt/sources.list.d/ablestack-qemu-exec-tools.list
                  echo "deb [trusted=yes] file://$ISO_MNT/deb/deb-ubuntu$VERSION_ID stable main" | sudo tee $LIST_FILE >/dev/null
                  sudo apt-get update
                  sudo apt-get -y install ablestack-qemu-exec-tools
                  echo "[INFO] Installation complete (DEB)."
                  ;;
              *)
                  echo "[ERROR] Unsupported distribution: $DISTRO"
                  exit 1
                  ;;
          esac
          EOF
          chmod +x release/install-linux.sh

      # README.txt
      - name: Create README.txt
        run: |
          cat <<'EOF' > release/README.txt
          ablestack-qemu-exec-tools Air-gapped ISO
          ==========================================
          이 ISO는 오프라인 환경에서도 설치 가능한 완전한 설치 미디어입니다.

          포함 내용:
          - rpm/    → Rocky 9, 10 / RHEL 9, 10 용 Repo
          - deb/    → Ubuntu 22.04, 24.04 용 Repo
          - msi/    → Windows Installer
          - install-linux.sh → 자동 설치 스크립트 (RPM/DEB 공용)

          사용 방법:
            mount -o loop ablestack-qemu-exec-tools-<VERSION>.iso /mnt
            cd /mnt
            sudo ./install-linux.sh

          릴리즈 버전: ${GITHUB_REF##*/}
          EOF

      # ISO 생성 (긴 파일명 지원)
      - name: Create ISO
        run: |
          sudo apt-get update && sudo apt-get install -y genisoimage
          VERSION=${GITHUB_REF##*/}
          mkisofs -o release/ablestack-qemu-exec-tools-${VERSION}.iso \
            -V "ablestack-qemu-exec-tools ${VERSION}" \
            -R -J -iso-level 3 \
            release/
          ls -lh release

      # GitHub Release
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          body: "Air-gapped, multi-OS offline installer with full dependencies."
          files: release/*
